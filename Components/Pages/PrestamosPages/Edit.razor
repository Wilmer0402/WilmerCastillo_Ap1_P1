@page "/Prestamos/Edit/{PrestamosId:int}"
@rendermode InteractiveServer
@inject PrestamosService prestamosService
@inject DeudoresService deudoresService
@inject NavigationManager navigation

<PageTitle>Editar Prestamos</PageTitle>
<EditForm Model="prestamos" OnValidSubmit="Modificar">
    <DataAnnotationsValidator />
    <div class="container">
        <div class="card shadow-lg">
            <div class="card-header bg-white text-black text-center" style="display: flex; align-items: center; justify-content: center;">
                <h4 style="margin: 0 15px;"><strong>Editar Prestamos:</strong></h4>
            </div>
            <div class="card-body">
                <label for="id" class="form-label"><strong>ID</strong></label>
                <InputNumber id="id" class="form-control" @bind-Value="prestamos.PrestamosId" readonly></InputNumber>

                <label for="Deudor" class="form-label"><strong>Deudor</strong></label>
                <InputSelect class="form-control" @bind-Value="prestamos.DeudorId">
                    <option value="" selected disabled>Elija una Opci&oacute;n</option>
                    @foreach (var deudor in ListaDeudores)
                    {
                        <option value="@deudor.DeudorId">@deudor.Nombres</option>
                    }
                </InputSelect>

                <label for="concepto" class="form-label"><strong>Concepto</strong></label>
                <InputText id="concepto" class="form-control" @bind-Value="prestamos.Concepto"></InputText>
                <ValidationMessage For="@(() => prestamos.Concepto)"></ValidationMessage>

                <label for="Monto" class="form-label"><strong>Monto</strong></label>
                <InputNumber id="Monto" class="form-control" @bind-Value="prestamos.Monto"></InputNumber>
                <ValidationMessage For="@(() => prestamos.Monto)"></ValidationMessage>
            </div>
            <div class="card-footer">
                @if (!string.IsNullOrEmpty(mensaje))
                {
                    <div class="alert alert-success" role="alert">
                        @mensaje
                    </div>
                }
                @if (!string.IsNullOrEmpty(mensajeError))
                {
                    <div class="alert alert-danger" role="alert">
                        @mensajeError
                    </div>
                }
                <a href="/Prestamos/Index" class="btn btn-secondary text-white bi bi-arrow-left"> Volver</a>
                <button type="submit" class="btn btn-primary bi bi-pencil-square"> Modificar</button>
            </div>
        </div>
    </div>
</EditForm>

@code {
    [Parameter]
    public int PrestamosId { get; set; }
    public Prestamos prestamos { get; set; } = new Prestamos();
    public string mensaje { get; set; }
    public string mensajeError { get; set; }
    public List<Deudores> ListaDeudores { get; set; } = new List<Deudores>();

    protected override async Task OnInitializedAsync()
    {
        if (PrestamosId > 0)
        {
            prestamos = await prestamosService.Buscar(PrestamosId);
            ListaDeudores = await deudoresService.Listar(w => w.DeudorId > 0);
        }
    }

    public async Task Modificar()
    {
        LimpiarMensajes();

        var modificar = await prestamosService.Guardar(prestamos);
        if (modificar)
        {
            mensaje = "Se modificó el préstamo correctamente";
        }
        else
        {
            mensajeError = "Error al modificar el préstamo";
        }
    }

    public void LimpiarMensajes()
    {
        mensaje = string.Empty;
        mensajeError = string.Empty;
    }
}
