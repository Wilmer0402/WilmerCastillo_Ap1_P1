@page "/Cobros/Create"
@rendermode InteractiveServer
@inject DeudoresService deudoresService
@inject CobrosService cobrosService
@inject PrestamosService prestamosService
@inject NavigationManager navigation

<PageTitle> Crear Cobros</PageTitle>

<EditForm Model="@cobros" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />

    <div class="container">
        <div class="card shadow-lg">
            <div class="card-header text-center">
                <h5 class="card-title">Crear Cobros</h5>
            </div>

            <div class="card-body">
                <div class="mb-3">
                    <label for="CobrosId" class="form-label"><strong>CobrosId</strong></label>
                    <InputNumber id="CobrosId" class="form-control" @bind-Value="cobros.CobrosId" />
                </div>

                <div class="mb-3">
                    <label for="Fecha" class="form-label"><strong>Fecha</strong></label>
                    <InputDate id="Fecha" class="form-control" @bind-Value="cobros.Fecha" />
                </div>

                <div class="mb-3">
                    <label for="DeudorId" class="form-label"><strong>Deudor</strong></label>
                    <div class="d-flex">
                        <InputSelect id="DeudorId" class="form-control" @bind-Value="cobros.DeudorId" @onchange="CargarPrestamos">
                            <option value="">Seleccione un Deudor</option>
                            @foreach (var deudor in Deudores)
                            {
                                <option value="@deudor.DeudorId">@deudor.Nombres</option>
                            }
                        </InputSelect>
                        <button type="button" class="btn btn-outline-primary ms-2 bi bi-search" @onclick="BuscarPrestamos"></button>
                    </div>
                    <ValidationMessage For="@(() => cobros.DeudorId)" />
                </div>
                </div>

            <div class="border border-success p-3 rounded mt-4">
                <h5>Detalles del Cobro:</h5>

                <PrestamosPicker Prestamos="ListaPrestamos"
                                 PrestamoId="DetalleSeleccionado.PrestamosId"
                                 Valor="DetalleSeleccionado.ValorCobrado"
                                 OnPrestamoSelected="PrestamoSelected" />

                <hr />
                <table class="table table-light">
                    <thead class="table table-striped">
                        <tr>
                            <th>Pr&eacute;stamo Id</th>
                            <th>Valor Cobrado</th>
                            <th>Acciones</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var detalle in cobros.CobrosDetalles)
                        {
                            <tr>
                                <td>@detalle.PrestamosId</td>
                                <td>@detalle.ValorCobrado</td>
                                <td>
                                    <button type="button" class="btn btn-danger bi bi-trash" @onclick="() =>RemoverDetalle(detalle)">Remover</button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>

            <div class="card-footer">
                <a href="/Cobros/Index" class="btn btn-secondary text-white bi bi-arrow-left"> Volver</a>
                <button type="submit" class="btn btn-primary ms-3 bi bi-floppy"> Guardar</button>
            </div>
        </div>
    </div>
</EditForm>

@code {
    public Cobros cobros { get; set; } = new Cobros();
    public List<Deudores> Deudores { get; set; } = new List<Deudores>();
    public List<Prestamos> PrestamosDisponibles { get; set; } = new List<Prestamos>();
    public List<Prestamos> ListaPrestamos { get; set; } = new List<Prestamos>();
    public CobrosDetalles DetalleSeleccionado { get; set; } = new CobrosDetalles();
    public CobrosDetalles NuevoDetalle { get; set; } = new CobrosDetalles();
    public string mensajeError { get; set; } = string.Empty;
    public double Valor { get; set; }

    private int? SeleccionadoPrestamoId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Deudores = await deudoresService
        .Listar(d => true);
    }

    public async Task Guardar()
    {
        var paso = await cobrosService.Guardar(cobros);

        if (paso)
        {

            navigation.NavigateTo("/Cobros/Index");
        }
        else
        {

        }
    }

    public async Task BuscarPrestamos()
    {
        ListaPrestamos = await prestamosService
            .GetPrestamosPendientes(cobros.DeudorId);
    }

    private async Task PrestamoSelected((Prestamos prestamos, double valor) selection)
    {
        var detalle = new CobrosDetalles
            {
                PrestamosId = selection.prestamos.PrestamosId,
                ValorCobrado = selection.valor
            };

        cobros.CobrosDetalles.Add(detalle);
        cobros.Monto = cobros.CobrosDetalles.Sum(d => d.ValorCobrado);

        DetalleSeleccionado = new CobrosDetalles();
        await Task.CompletedTask;
    }

    private async Task AplicarValor()
    {
        cobros.CobrosDetalles.Clear();
        if (Valor > 0)
        {

            var prestamosPendientes = await prestamosService
                .GetPrestamosPendientes(cobros.DeudorId);
            foreach (var prestamo in prestamosPendientes)
            {
                double valorCobrado = 0;
                if (prestamo.Balance < Valor)
                    valorCobrado = prestamo.Balance;
                else
                    valorCobrado = Valor;

                Valor -= valorCobrado;

                cobros.CobrosDetalles.Add(
                    new CobrosDetalles()
                        {
                            PrestamosId = prestamo.PrestamosId,
                            ValorCobrado = valorCobrado
                        }
                );
            }


        }

    }

    public void RemoverDetalle(CobrosDetalles detalle)
    {
        cobros.CobrosDetalles.Remove(detalle);
        DetalleSeleccionado.ValorCobrado = detalle.ValorCobrado;

    }

    public async Task CargarPrestamos(ChangeEventArgs e)
    {
        mensajeError = string.Empty;

        if (int.TryParse(e.Value?.ToString(), out int deudorId) && deudorId > 0)
        {
            PrestamosDisponibles = await prestamosService.Listar(p => p.DeudorId == deudorId);
        }
        else
        {
            PrestamosDisponibles.Clear();
            mensajeError = "Debe seleccionar un deudor válido.";
        }
    }
}

