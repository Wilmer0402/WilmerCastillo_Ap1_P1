@page "/Cobros/Create"
@rendermode InteractiveServer
@inject CobrosService cobrosService
@inject PrestamosService prestamosService
@inject DeudoresService deudoresService
@inject NavigationManager navigation

<PageTitle>Registro Cobros</PageTitle>

<EditForm Model="cobros" OnValidSubmit="Crear">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="container">
        <div class="card shadow-lg">
            <div class="card-header">
                <h5 class="card-title">Registro de Cobros</h5>
                <div class="d-flex justify-content-end">
                    <button type="button" class=" btn btn-outline-primary bi bi-search" @onclick="BuscarPrestamos">Buscar</button>
                </div>
            </div>

            <div class="card-body">
                <label for="CobrosId" class="form-label"><strong>CobrosId</strong></label>
                <InputNumber id="CobrosId" class="form-control" @bind-Value="cobros.CobrosId" />
                <ValidationMessage For="@(() => cobros.CobrosId)" />

                <label for="DeudorId" class="form-label"><strong>Deudor</strong></label>
                <InputSelect id="DeudorId" class="form-control" @bind-Value="cobros.DeudorId" @onchange="OnDeudorChanged">
                    <option value="">Seleccione un Deudor</option>
                    @foreach (var deudor in Deudores)
                    {
                        <option value="@deudor.DeudorId">@deudor.Nombres</option>
                    }
                </InputSelect>
                <ValidationMessage For="@(() => cobros.DeudorId)" />

                <label for="Fecha" class="form-label"><strong>Fecha</strong></label>
                <InputDate id="Fecha" class="form-control" @bind-Value="cobros.Fecha" />
                <ValidationMessage For="@(() => cobros.Fecha)" />

                <label for="Monto" class="form-label"><strong>Monto Total Prestado</strong></label>
                <InputNumber id="Monto" class="form-control" @bind-Value="montoPrestado" Step="0.01" readonly />
                <ValidationMessage For="@(() => montoPrestado)" />

                <div class="border border-success p-3 rounded mt-4">
                    <h5 class="mt-4">Detalles del Cobro</h5>
                    <table class="table">
                        <thead>
                            <tr>
                                <th>PrestamosId</th>
                                <th>Valor Cobrado</th>
                                <th>Acciones</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var detalle in cobros.CobrosDetalles)
                            {
                                <tr>
                                    <td>
                                        <InputSelect class="form-control" @bind-Value="detalle.PrestamosId" @onchange="() => CargarMonto(detalle)">
                                            <option value="">Seleccione un Préstamo</option>
                                            @if (prestamosFiltrados.Any())
                                            {
                                                foreach (var prestamo in prestamosFiltrados)
                                                {
                                                    <option value="@prestamo.PrestamosId">@prestamo.Concepto</option>
                                                }
                                            }
                                        </InputSelect>
                                        <ValidationMessage For="@(() => detalle.PrestamosId)" />
                                    </td>
                                    <td>
                                        <InputNumber class="form-control" @bind-Value="detalle.ValorCobrado" Step="0.01" />
                                        <ValidationMessage For="@(() => detalle.ValorCobrado)" />
                                    </td>
                                    <td>
                                        <button type="button" class="btn btn-danger" @onclick="() => EliminarDetalle(detalle)">Eliminar</button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
                <div class="d-flex justify-content-between">
                    <button type="button" class="btn btn-success bi bi-pencil-square" @onclick="AgregarDetalle"> Agregar Detalle</button>
                    <button type="button" class="btn btn-primary bi bi-search" @onclick="BuscarMontoPrestamo">   Buscar Monto</button>
                </div>

                @if (!string.IsNullOrEmpty(mensajeError))
                {
                    <div class="alert alert-danger" role="alert">
                        @mensajeError
                    </div>
                }

                @if (!string.IsNullOrEmpty(mensajeExito))
                {
                    <div class="alert alert-success" role="alert">
                        @mensajeExito
                    </div>
                }
            </div>

            <div class="card-footer">
                <a href="/Cobros/Index" class="btn btn-secondary text-white bi bi-arrow-left"> Volver</a>
                <button type="submit" class="btn btn-primary bi bi-floppy-fill"> Guardar</button>
            </div>
        </div>
    </div>
</EditForm>

@code {
    public Cobros cobros { get; set; } = new Cobros();
    public List<Deudores> Deudores { get; set; } = new List<Deudores>();
    public List<Prestamos> prestamosFiltrados { get; set; } = new List<Prestamos>();
    private string mensajeError { get; set; } = string.Empty;
    private string mensajeExito { get; set; } = string.Empty;
    private decimal montoPrestado { get; set; } = 0;

    protected override async Task OnInitializedAsync()
    {
        Deudores = await deudoresService.Listar(w => true);
        prestamosFiltrados = await prestamosService.Listar(w => true);
    }

    private async Task OnDeudorChanged(ChangeEventArgs e)
    {
        if (e.Value != null)
        {
            var selectedDeudorId = e.Value.ToString();
            if (int.TryParse(selectedDeudorId, out int idDeudor))
            {
                prestamosFiltrados = await prestamosService.Listar(p => p.DeudorId == idDeudor);

                if (prestamosFiltrados.Any())
                {
                    if (prestamosFiltrados.Count == 1)
                    {
                        var nuevoDetalle = new CobrosDetalles
                            {
                                PrestamosId = prestamosFiltrados.First().PrestamosId
                            };
                        cobros.CobrosDetalles.Add(nuevoDetalle);

                        montoPrestado = prestamosFiltrados.Sum(p => (decimal)p.Monto);
                    }
                    else
                    {
                        mensajeError = "Este deudor tiene varios préstamos. Debe agregar un detalle para cada uno de ellos.";
                    }
                }
            }
            else
            {
                prestamosFiltrados.Clear();
            }
        }
        else
        {
            prestamosFiltrados.Clear();
        }
    }

    public async Task Crear()
    {
        mensajeError = string.Empty;
        mensajeExito = string.Empty;

        if (cobros.CobrosDetalles.Count == 0)
        {
            mensajeError = "Debe agregar al menos un detalle.";
            return;
        }

        
        foreach (var detalle in cobros.CobrosDetalles)
        {
            var prestamo = prestamosFiltrados.FirstOrDefault(p => p.PrestamosId == detalle.PrestamosId);
            if (prestamo != null && detalle.ValorCobrado > prestamo.Monto)
            {
                mensajeError = $"El valor cobrado ({detalle.ValorCobrado}) no puede ser mayor al monto total prestado ({prestamo.Monto}) para el préstamo {prestamo.PrestamosId}.";
                return;
            }
        }

        cobros.Monto = cobros.CobrosDetalles.Sum(d => d.ValorCobrado);

        if (!await cobrosService.Existe(cobros.CobrosId))
        {
            var resultado = await cobrosService.Insertar(cobros);
            if (resultado)
            {
                mensajeExito = "Cobro Registrado Exitosamente.";
                cobros = new Cobros();
                montoPrestado = 0;
            }
            else
            {
                mensajeError = "Error al guardar el cobro.";
            }
        }
        else
        {
            mensajeError = "Error: el Id ya existe. Por favor, elija otro Id.";
        }
    }

    public void AgregarDetalle()
    {
        var nuevoDetalle = new CobrosDetalles();
        if (prestamosFiltrados.Any())
        {
            nuevoDetalle.PrestamosId = prestamosFiltrados.First().PrestamosId;
        }
        cobros.CobrosDetalles.Add(nuevoDetalle);
    }

    public void EliminarDetalle(CobrosDetalles detalle)
    {
        cobros.CobrosDetalles.Remove(detalle);
    }

    private async Task BuscarPrestamos()
    {
        if (cobros.DeudorId != null && cobros.DeudorId > 0)
        {
            prestamosFiltrados = await prestamosService.Listar(p => p.DeudorId == cobros.DeudorId);

            if (prestamosFiltrados.Any())
            {
                // Si hay préstamos disponibles, y hay solo uno, se agrega directamente el detalle.
                if (prestamosFiltrados.Count == 1)
                {
                    var detalle = new CobrosDetalles
                        {
                            PrestamosId = prestamosFiltrados.First().PrestamosId
                        };
                    cobros.CobrosDetalles.Add(detalle);
                    montoPrestado = prestamosFiltrados.Sum(p => (decimal)p.Monto);
                }
                else
                {
                    // Si hay múltiples préstamos, muestra un mensaje de error.
                    mensajeError = "Este deudor tiene varios préstamos. Debe agregar un detalle para cada uno de ellos.";
                }
            }
            else
            {
                mensajeError = "No se encontraron préstamos para este deudor.";
            }
        }
        else
        {
            mensajeError = "Seleccione un deudor antes de buscar.";
        }
    }


    private async Task BuscarMontoPrestamo()
    {
        if (cobros.CobrosDetalles.Any())
        {
            var prestamo = await prestamosService.BuscarPorId((int)cobros.CobrosDetalles.Last().PrestamosId);
            if (prestamo != null)
            {
                montoPrestado = (decimal)prestamo.Monto;
            }
        }
    }

    private void CargarMonto(CobrosDetalles detalle)
    {
        var prestamo = prestamosFiltrados.FirstOrDefault(p => p.PrestamosId == detalle.PrestamosId);
        if (prestamo != null)
        {
            detalle.ValorCobrado = prestamo.Monto;
        }
    }


}
